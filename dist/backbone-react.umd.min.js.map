{"version":3,"file":"backbone-react.umd.min.js","sources":["../src/backbone-view.tsx","../src/utils.ts","../src/react-view.tsx","../src/use-model.ts"],"sourcesContent":["import React, {\n  memo,\n  forwardRef,\n  useRef,\n  useEffect,\n  Ref,\n  RefObject\n} from 'react';\nimport * as Backbone from 'backbone';\nimport { isFunction } from './utils';\n\ntype RefFunction<TValue> = (value: TValue | null) => void;\n\n// TODO Better typing here\ntype Component = any;\n\nexport interface Props {\n  View: typeof Backbone.View;\n  options?: object;\n  as?: string | Component;\n  instance?: Ref<Backbone.View>;\n}\n\nexport default memo(\n  forwardRef(function BackboneView(props: Props, ref: Ref<any>) {\n    const {\n      View,\n      options = {},\n      as: Component = 'div',\n      instance: instanceRef,\n      ...passthrough\n    } = props;\n    const container = useRef<null | HTMLElement>(null);\n\n    // For mount:, create instance, append, and then render\n    // (render after appending to avoid issues with views that expect to be in the DOM)\n    //\n    // For update: not used here due to React.memo that doesn't change\n    //\n    // For unmount: remove the instance to allow for cleanup\n    useEffect(() => {\n      const instance = new View(options);\n\n      container.current!.appendChild(instance.el);\n      instance.render();\n\n      setRef(instanceRef, instance);\n\n      return () => {\n        instance.remove();\n      };\n    }, [container]);\n\n    return <Component {...passthrough} ref={ref} />;\n  }),\n\n  // The only way to interact with the Backbone view is imperatively via instance\n  alwaysEqual\n);\n\nfunction setRef<TValue>(ref: Ref<TValue> | undefined, value: TValue | null) {\n  if (!ref) return;\n\n  if (isFunction(ref)) {\n    (ref as RefFunction<TValue>)(value);\n  } else {\n    // @ts-ignore Cannot assign to 'current' because it is a read-only property\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n    (ref as RefObject<TValue>).current = value;\n  }\n}\n\nfunction alwaysEqual() {\n  return true;\n}\n","export function pick<TObject, TKey extends keyof TObject>(\n  object: TObject,\n  keys: TKey[]\n): Pick<TObject, TKey> {\n  const picked: Partial<TObject> = {};\n  for (const key of Object.keys(object)) {\n    if (keys.includes(key as TKey)) {\n      (picked as any)[key] = (object as any)[key];\n    }\n  }\n\n  return picked as Pick<TObject, TKey>;\n}\n\nexport function isFunction(value: any): boolean {\n  return (\n    !!value && Object.prototype.toString.call(value) === '[object Function]'\n  );\n}\n","import * as Backbone from 'backbone';\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nexport default class ReactView extends Backbone.View<Backbone.Model> {\n  Component: any;\n  props: object;\n\n  constructor(Component: any, props: object = {}, options: object = {}) {\n    super(options);\n\n    this.Component = Component;\n    this.props = props;\n  }\n\n  render() {\n    const { Component, props, el } = this;\n    render(<Component {...props} />, el);\n\n    return this;\n  }\n}\n","import * as Backbone from 'backbone';\nimport * as React from 'react';\nimport { pick } from './utils';\n\nexport default function useModel(model: Backbone.Model, keys?: string[]): any {\n  const select = () => {\n    return { ...(keys ? pick(model.attributes, keys) : model.attributes) };\n  };\n\n  const [attributes, setAttributes] = React.useState(select());\n  const event = keys ? keys.map(key => `change:${key}`).join(' ') : 'change';\n\n  React.useEffect(() => {\n    const onChange = () => {\n      setAttributes(select());\n    };\n    model.on(event, onChange);\n\n    return () => {\n      model.off(event, onChange);\n    };\n  }, [model]);\n\n  return attributes;\n}\n"],"names":["memo","forwardRef","props","ref","View","_a","options","_b","Component","instanceRef","passthrough","container","useRef","useEffect","instance","current","appendChild","el","render","value","Object","prototype","toString","call","isFunction","setRef","remove","React","_super","_this","tslib_1.__extends","ReactView","React.createElement","this","Backbone.View","model","keys","select","object","picked","_i","key","includes","pick","attributes","setAttributes","event","map","join","React.useEffect","onChange","on","off"],"mappings":"ovBAuBeA,OACbC,aAAW,SAAsBC,EAAcC,GAE3C,IAAAC,SACAC,YAAAC,kBACAC,OAAAC,qBACAC,aACAC,8TAEIC,EAAYC,SAA2B,MAqB7C,OAbAC,YAAU,WACR,IAAMC,EAAW,IAAIV,EAAKE,GAO1B,OALAK,EAAUI,QAASC,YAAYF,EAASG,IACxCH,EAASI,SAgBf,SAAwBf,EAA8BgB,GACpD,IAAKhB,EAAK,iBC/CegB,GACzB,QACIA,GAAmD,sBAA1CC,OAAOC,UAAUC,SAASC,KAAKJ,GD+CxCK,CAAWrB,GAKZA,EAA0BY,QAAUI,EAJpChB,EAA4BgB,GAlB3BM,CAAOhB,EAAaK,GAEb,WACLA,EAASY,WAEV,CAACf,IAEGgB,gBAACnB,OAAcE,GAAaP,IAAKA,OAmB5C,WACE,OAAO,IErET,kBAIE,WAAYK,EAAgBN,EAAoBI,gBAApBJ,mBAAoBI,MAAhD,MACEsB,YAAMtB,gBAENuB,EAAKrB,UAAYA,EACjBqB,EAAK3B,MAAQA,IASjB,kIAjBuC4B,MAWrCC,mBAAA,WACQ,IAAEvB,iBAAWN,aAAOe,UAG1B,OAFAC,SAAOc,gBAACxB,OAAcN,IAAWe,GAE1BgB,SAf4BC,2DCANC,EAAuBC,GACtD,IAAMC,EAAS,WACb,YAAaD,WFLfE,EACAF,GAGA,IADA,IAAMG,EAA2B,OACflC,EAAAe,OAAOgB,KAAKE,GAAZE,WAAAA,IAAqB,CAAlC,IAAMC,OACLL,EAAKM,SAASD,KACfF,EAAeE,GAAQH,EAAeG,IAI3C,OAAOF,EELeI,CAAKR,EAAMS,WAAYR,GAAQD,EAAMS,aAGrDvC,kBAACuC,OAAYC,OACbC,EAAQV,EAAOA,EAAKW,IAAI,SAAAN,GAAO,MAAA,UAAUA,IAAOO,KAAK,KAAO,SAalE,OAXAC,YAAgB,WACd,IAAMC,EAAW,WACfL,EAAcR,MAIhB,OAFAF,EAAMgB,GAAGL,EAAOI,GAET,WACLf,EAAMiB,IAAIN,EAAOI,KAElB,CAACf,IAEGS"}